public static string MixedFraction(string s)
        {
            string[] sp = s.Split('/');

            int num = Convert.ToInt32(sp[0]);
            int den = Convert.ToInt32(sp[1]);

            try
            {
                int temp = num / den;
            }
            catch (DivideByZeroException e)
            {
                throw e;
            }

            if (num < 0 && den < 0) { den *= -1; num *= -1; }

            int whole = num / den;

            if (num % den == 0)
            {
                return $"{whole}";
            }

            int newNum = num % den;

            if (newNum < 0 && whole != 0)
            {
                newNum *= -1;
            }
            else if (den < 0 && whole != 0)
            {
                den *= -1;
            }

            for (int i = newNum > 0 ? newNum : newNum * -1; i >= 2; i--)
            {
                if (newNum % i == 0 && den % i == 0)
                {
                    newNum /= i;
                    den /= i;
                }
            }

            if (whole == 0)
            {
                if (den < 0 && newNum > 0)
                {
                    newNum *= -1;
                    den *= -1;
                }
                return $"{newNum}/{den}";
            }
            else
            {
                return $"{whole} {newNum}/{den}";
            }
        }

**************************************************************************************

Test Cases:
namespace Solution 
{
  using NUnit.Framework;
  using System;  
  using System.Linq;

  [TestFixture]
  public class KataTests
  {
    [Test]
    public void BasicTests()
    {
      Assert.AreEqual("4 2/3", Kata.MixedFraction("42/9"));
      Assert.AreEqual("2", Kata.MixedFraction("6/3"));
      Assert.AreEqual("1", Kata.MixedFraction("1/1"));
      Assert.AreEqual("1", Kata.MixedFraction("11/11"));
      Assert.AreEqual("2/3", Kata.MixedFraction("4/6"));
      Assert.AreEqual("0", Kata.MixedFraction("0/18891"));
      Assert.AreEqual("-1 3/7", Kata.MixedFraction("-10/7"));
      Assert.AreEqual("3 1/7", Kata.MixedFraction("-22/-7"));
      Assert.AreEqual("-195595/564071", Kata.MixedFraction("-195595/564071")); // Special-Test ;-)
      
      Assert.Throws(typeof(DivideByZeroException), delegate { Kata.MixedFraction("0/0"); } );
      Assert.Throws(typeof(DivideByZeroException), delegate { Kata.MixedFraction("3/0"); } );
    }
    
    [Test]
    public void RandomTests()
    {
      var rand = new Random();
      
      Func<string,string> MyMixedFraction = delegate (string s)
      {
        var sign = "";
        var result = "";
        if(s.Count(c => c == '-') % 2 != 0)
        {
          sign = "-";
        }
        var parts = s.Split('/');
        var d1 = Math.Abs(int.Parse(parts[0]));
        var d2 = Math.Abs(int.Parse(parts[1]));
        if(d2 == 0)
        {
          throw new DivideByZeroException();
        }    
  
        result += d1 / d2;
        var remainder = d1 % d2;

        if(result == "0" && remainder != 0)
        {
          result = "";
        }

        if(remainder != 0)
        {
          result += " ";
    
          var y = remainder;
    
          while((d2 % y != 0) || (remainder % y != 0))
          {
            y--;
          }    
  
          result += remainder/y + "/" + d2/y;
        }
        result = sign + result.Trim();
        if(result.StartsWith("-0"))
        {
          if(result.Length>2)
          {
            result = result.Substring(3);
          }
          else
          {
            result = "0";
          }
        }
        return result.Trim();
      };
      
      for (var r=0;r<40;r++)
      {
        var exp = rand.Next(1,4);
        var a=Math.Pow(-1, rand.Next(0,2)) * rand.Next(0, (int)Math.Pow(10, exp) + 1);
        var b=Math.Pow(-1, rand.Next(0,2)) * rand.Next(0, (int)Math.Pow(10, exp) + 1);
        var s = a + "/" + b;

        if (b==0)
        {
          Assert.Throws(typeof(DivideByZeroException), delegate { Kata.MixedFraction(s); } );
        }
        else
        {
          Assert.AreEqual(MyMixedFraction(s), Kata.MixedFraction(s), "It should work for random inputs too");
        }
      }
      
      Func<int> r39214 = delegate ()
      {
        return rand.Next(-999999,1000000);
      };
      
      Action<int, int> checker32817409 = delegate (int p, int q)
      {
        var s = p + "/" + q;
        if (q == 0)
        {
          Assert.Throws(typeof(DivideByZeroException), delegate { Kata.MixedFraction(s); } );
        }
        else
        {
          Assert.AreEqual(MyMixedFraction(s), Kata.MixedFraction(s), "It should work for random inputs too");
        }
      };

      // Generate simple test cases
      for (var i=0;i<36;i++)
      {
        var x=r39214();
        var y=r39214();
        checker32817409(x, y);
      }

      // Generate test cases with abs(result) below one
      for (var i=0;i<20;i++)
      {
        var arr = new int[] { r39214(), r39214() }.OrderBy(a => Math.Abs(a)).ToArray();
        checker32817409(arr[0], arr[1]);
      }
  
      // Generate test cases with zero result
      for (var i=0;i<9;i++)
      {
        var x=0;
        var y=r39214();
        checker32817409(x, y);
      }

      // Generate a test case with division by zero
      for (var i=0;i<5;i++)
      {
        var x=r39214();
        var y=0;
        checker32817409(x, y);
      }      
    }
  }
}