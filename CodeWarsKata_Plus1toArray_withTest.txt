using System;
using System.Collections.Generic;

namespace Kata
{
  public static class Kata
  {
    public static int[] UpArray(int[] num)
    {    
      if (num.Length == 0) { return null; }

            List<int> tempList = new List<int>();

            int carryOver = 0;
            for (int i = num.Length-1; i >= 0; i--)
            {
                if (num[i] > 9 || num[i] < 0) { return null; }

                if (num[i] != 9)
                {
                    if (i == num.Length - 1)
                    {
                        tempList.Add(num[i] + 1);
                    }
                    else
                    {
                        if (carryOver > 0)
                        {
                            tempList.Add(num[i] + 1);
                            carryOver = 0;
                        }
                        else
                        {
                            tempList.Add(num[i]);
                        }                        
                    }
                }
                else
                {
                    if (i == num.Length - 1)
                    {
                        carryOver = 1;
                        tempList.Add(0);
                    }
                    else if(carryOver > 0)
                    {
                        tempList.Add(0);
                    }
                    else
                    {
                        tempList.Add(num[i]);
                    }
                }
            }

            if (carryOver != 0)
            {
                tempList.Add(1);
            }

            tempList.Reverse();
            return tempList.ToArray();
    }
  }
}

******************************************************************

Test Cases:
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
namespace Kata 
{  
  [TestFixture]
  public class ArrayTest
  {
    [Test]
    public void UpInvalid1()
    {
      var num = new int[] {1, 2, 33};      
      Assert.AreEqual(null, Kata.UpArray(num));
    }
    
    [Test]
    public void UpInvalid2()
    {
      var num = new int[] {1, 2, -1};      
      Assert.AreEqual(null, Kata.UpArray(num));
    }
    
    [Test]
    public void UpInvalid3()
    {
      var num = new int[] {};      
      Assert.AreEqual(null, Kata.UpArray(num));
    }
    
    [Test]
    public void Up074()
    {
      var num = new int[] {0, 7, 4};
      var newNum = new int[] {0, 7, 5};
      Assert.AreEqual(newNum, Kata.UpArray(num));
    }
    
    
     [Test]
    public void Up574()
    {
      var num = new int[] {5, 7, 4};
      var newNum = new int[] {5, 7, 5};
      Assert.AreEqual(newNum, Kata.UpArray(num));
    }
    
    [Test]
    public void Up999()
    {
      var num = new int[] {9, 9, 9};
      var newNum = new int[] {1, 0, 0, 0};
      Assert.AreEqual(newNum, Kata.UpArray(num));
    }
    
    [Test]
    public void UpBigArray()
    {
      var num = new int[] {2, 1, 4, 7, 4, 8, 3, 6, 4, 7};
      var newNum = new int[] {2, 1, 4, 7, 4, 8, 3, 6, 4, 8};
      Assert.AreEqual(newNum, Kata.UpArray(num));
    } 
    
    [Test]
    public void UpBiggerArray()
    {
      var num = new int[] {9,2,2,3,3,7,2,0,3,6,8,5,4,7,7,5,8,0,7};
      var newNum = new int[] {9,2,2,3,3,7,2,0,3,6,8,5,4,7,7,5,8,0,8};
      Assert.AreEqual(newNum, Kata.UpArray(num));
    }    
    
    [Test]
    public void UpBiggestArray()
    {
      var num = new int[] {9,2,2,3,3,7,2,0,3,6,8,5,4,7,7,5,8,0,7,5,3,2,6,7,8,4,2,4,2,6,7,8,7,4,5,2,1};
      var newNum = new int[] {9,2,2,3,3,7,2,0,3,6,8,5,4,7,7,5,8,0,7,5,3,2,6,7,8,4,2,4,2,6,7,8,7,4,5,2,2};
      Assert.AreEqual(newNum, Kata.UpArray(num));
    } 
    
    [Test]
    public void UpRandomArray()
    {
      var random = new Random();
      for (var i = 0; i < 10000; i++)
      {
          var length = random.Next(1, 1000);
          var arr = new int[length];
          for (int j = 0; j < length; j++)
              arr[j] = random.Next(-5, 15);
          Assert.AreEqual(UpArray(arr), Kata.UpArray(arr));
      }
    } 
    
    private int[] UpArray(int[] num)
    {
        if (num == null || num.Length == 0) return null;
        if (!num.All(x => x >= 0 && x <= 9)) return null;
        var list = new List<int>(num);
        list[list.Count - 1]++;
        for (int i = list.Count - 1; i >= 0; i--)
        {
            if (list[i] == 10)
            {
                list[i] -= 10;
                if (i == 0) list.Insert(0, 1);
                else list[i - 1]++;
            }
        }
        return list.ToArray();
    }
  }
}