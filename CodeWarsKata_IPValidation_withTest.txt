using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp4
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(is_valid_IP("255.255.255.255")); // true
            Console.WriteLine(is_valid_IP("0.0.0.0"));         // true

            Console.WriteLine(is_valid_IP("257.034.3.021"));   // false
            Console.WriteLine(is_valid_IP(""));                // false            
            Console.WriteLine(is_valid_IP("12.34.56.78sf"));   // false
            Console.WriteLine(is_valid_IP("pr12.34.56.78"));   // false
            Console.WriteLine(is_valid_IP("123.456.789.0"));   // false
            Console.WriteLine(is_valid_IP("12.34.56"));        // false
            Console.WriteLine(is_valid_IP("12.34.56.-1"));     // false
            Console.WriteLine(is_valid_IP("12.34.56 .1"));     // false
            Console.WriteLine(is_valid_IP("   .   .   .  "));  // false

        }

        public static bool is_valid_IP(string ipAddres)
        {
            // Count to see if there are three decimals
            int decimalCount = 0;

            // traverse through the string
            foreach (char c in ipAddres)
            {
                // count the amount of decimals
                if (char.IsPunctuation(c))
                {
                    decimalCount++;
                }

                // return false if any car is a space or symbol
                if (char.IsSymbol(c) || c == ' ')
                {
                    return false;
                }

                // return false if any char is a letter
                if (char.IsLetter(c))
                {
                    return false;
                }
            }

            // If string is null or white spaces return false
            if (string.IsNullOrWhiteSpace(ipAddres))
            {
                return false;
            }            

            // Return false if there are too many or too little
            if(decimalCount != 3)
            {
                return false;
            }

            // Split the IpAddress into 4 substrings into a string array
            string[] arr = ipAddres.Split('.');

            foreach(var item in arr)
            {
                // is string empty? return false so that the empty string doesnt try to get indexed and crash in the next if statement
                if (item == string.Empty) { return false; }

                // If any substrings starts with 0 (with more than 1 char after it) return false
                if (item.StartsWith("0"))
                {
                    if(item.Length > 1)
                    {
                        return false;
                    }                    
                }                

                // If substring is not between 0 and 255 return false
                if (Convert.ToInt32(item) > 255 || Convert.ToInt32(item) < 0)
                {
                    return false;
                }
            }

            // return true if all tests have been passed
            return true;
        }
    }
}

***********************************************************************************************************************

Test Cases:
namespace Solution
{
    using NUnit.Framework;
    using System;
    using System.Collections.Generic;

    [TestFixture]
    public class SolutionTest
    {
        [Test]
        public void TestCases()
        {
            Assert.AreEqual(true, Kata.is_valid_IP("0.0.0.0"));
            Assert.AreEqual(true, Kata.is_valid_IP("12.255.56.1"));
            Assert.AreEqual(true, Kata.is_valid_IP("137.255.156.100"));

            Assert.AreEqual(false, Kata.is_valid_IP(""));
            Assert.AreEqual(false, Kata.is_valid_IP("abc.def.ghi.jkl"));
            Assert.AreEqual(false, Kata.is_valid_IP("123.456.789.0"));
            Assert.AreEqual(false, Kata.is_valid_IP("12.34.56"));
            Assert.AreEqual(false, Kata.is_valid_IP("12.34.56.00"));
            Assert.AreEqual(false, Kata.is_valid_IP("12.34.56.7.8"));
            Assert.AreEqual(false, Kata.is_valid_IP("12.34.256.78"));
            Assert.AreEqual(false, Kata.is_valid_IP("1234.34.56"));
            Assert.AreEqual(false, Kata.is_valid_IP("pr12.34.56.78"));
            Assert.AreEqual(false, Kata.is_valid_IP("12.34.56.78sf"));
            Assert.AreEqual(false, Kata.is_valid_IP("12.34.56 .1"));
            Assert.AreEqual(false, Kata.is_valid_IP("12.34.56.-1"));
            Assert.AreEqual(false, Kata.is_valid_IP("123.045.067.089"));
        }

        [Test]
        public void RandomTests()
        {
            string letters = "abcdefghijklm";
            Random rnd = new Random();

            for (int test = 0; test < 300; ++test) {

                List<string> parts = new List<string>();
                for (int i = 0; i < 4; ++i)
                    parts.Add(rnd.Next(256).ToString());

                int pos = rnd.Next(4);
                string someLetters = letters.Substring(rnd.Next(4), rnd.Next(2) + 1);
                bool valid = false;
                int route = rnd.Next(12);
                switch (route)
                {
                    case 0: valid = true; break;
                    case 1: parts[pos] = ""; break;
                    case 2: parts[pos] = someLetters; break;
                    case 3: parts[pos] = rnd.Next(256, 300).ToString(); break;
                    case 4: parts.RemoveAt(pos); break;
                    case 5: parts.Add(rnd.Next(256).ToString()); break;
                    case 6: parts[0] += someLetters; break;
                    case 7: parts[3] += someLetters; break;
                    case 8: parts[rnd.Next(1, 3)] += " "; break;
                    case 9: parts[pos] = "-" + parts[pos]; break;
                    case 10: parts[pos] = "0" + rnd.Next(0, 100); break;
                    case 11: parts[pos] = "00"; break;
                }

                string ip = string.Join(".", parts);
                Assert.AreEqual(valid, Kata.is_valid_IP(ip), "IP address: {0}", ip);
            }
        }
    }
}
