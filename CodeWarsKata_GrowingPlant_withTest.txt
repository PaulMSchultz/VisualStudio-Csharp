namespace myjinxin
{
    using System;
    
    public class Kata
    {
        public int GrowingPlant(int UpSpeed, int DownSpeed, int DesiredHeight)
        {
              int actualHeight = 0;
              
              int day = 0;
              
              while( actualHeight < DesiredHeight )
              {
                  day++;
                  actualHeight += UpSpeed;
                  
                  if ( actualHeight >= DesiredHeight )
                  {
                      return day;
                  }
                  else
                  {
                      actualHeight -= DownSpeed;
                  }
                  
                  
              }
              return day;
        }
    }
}


----------------------------------------------------------------------------------------

Test Cases:
namespace myjinxin
{
    using NUnit.Framework;
    using System;
    using System.Collections.Generic;
    //using System.Text;
    using System.Linq;
    using System.Text.RegularExpressions;
    [TestFixture]
    public class CsharpTest
    {
public int An(int up, int down, int dh){
  int ttl=0,r=0;
  while (ttl<=dh){
    r++;
    ttl+=up;
    if (ttl>=dh) break;
    ttl-=down;
  }
  return r;
}  
public int[] rndtest(){
  int up=rand(5,100),down=rand(2,up-1),t=rand(4,1000);
  return new int[]{up,down,t};
}
public void shuff(List<int> r){
  for(int i=0;i<50;i++){
    int idx1=rand(0,r.Count-1),idx2=rand(0,r.Count-1);
    var tt=r[idx1];
    r[idx1]=r[idx2];
    r[idx2]=tt;
  }
}

        public int[] rndtest1(){
          var r=new List<int>();
          int len=rand(500,3000);
          for(var i=0;i<len;i++) r.Add(rand(1,1000));
          return r.ToArray();
        }
        Random rndnum=new Random(unchecked((int)DateTime.Now.Ticks));
        public int rand(int a,int b){
          return a>b?rand(b,a):rndnum.Next(a,b+1);
        }
        public string rnds(){
          var len= rand(1,100);
          var rs=new List<char>();
          for (int i=0;i<len;i++) rs.Add(rndcl());
          return string.Join("",rs);
        }
        public string rndss(){
          var len= rand(3,7);
          var rs=new List<string>();
          for (int i=0;i<len;i++) rs.Add(rnds());
          return string.Join(" ",rs);
        }
        public string rnds2(int n){
          var len= n;
          var rs=new List<char>();
          for (int i=0;i<len;i++) rs.Add(rndch());
          return string.Join("",rs);
        }
        public char rndcl(){
          var allc="abcdefghijklmnopqrstuvwxyz";
          return allc[rand(0,allc.Length-1)];
        }
        public char rndchl(){
          var allc="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
          return allc[rand(0,allc.Length-1)];
        }
        public char rndch(){
          var allc="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
          return allc[rand(0,allc.Length-1)];
        }
        [Test]
        public void Test1__Basic_Tests(){
            var kata=new Kata();
            var passed="<font size=2 color='#8FBC8F'>Test Passed!</font>\n";
            
            Assert.AreEqual(10,kata.GrowingPlant(100,10,910));
            Console.WriteLine(passed);
            Assert.AreEqual(1,kata.GrowingPlant(10,9,4));
            Console.WriteLine(passed);
            Console.WriteLine(" ");
            
        }
        
        [Test]
        public void Test2__100_Random_Tests(){
          var kata=new Kata();
          var passed="<font size=2 color='#8FBC8F'><b>Test Passed!</b></font>";
            
          for (int i=0;i<100;i++){
              var ab=rndtest();
              Console.WriteLine("<font size=2 color='#CFB53B'>Testing for: "+
              "\nUpSpeed = "+ab[0]
              +"\nDownSpeed = "+ab[1]
              +"\nDesiredHeight = "+ab[2]
              //+", numberOfDigits = "+ab[1]
              //+", loved = "+ab[2]
              //+", s = "+ab[3]
              +"</font>");
              var answer=An(ab[0],ab[1],ab[2]);
              Assert.AreEqual(answer, kata.GrowingPlant(ab[0],ab[1],ab[2]));
              Console.WriteLine("<font size=2 color='#8FBC8F'>"+
              "Pass Value = "+answer+"</font>\n");
              Console.WriteLine(" ");
            }
          
          Console.WriteLine("<div style='width:360px;background-color:gray'><br><font size=2 color='#3300dd'><b>Happy Coding ^_^</b></font>");
          Console.WriteLine("<br><font size=2 color='#5500ee'><b>Thanks for solve this kata,\nI'm waiting for your:<font color='993300'>\nfeedback, voting and ranking ;-)</b></font></div>");
          
        }
    }
} 