 class Program
    {
        static void Main(string[] args)
        {
            string str = "abcde";

            string[] str2 = Solution(str);
            Console.WriteLine(str2.Length);

            foreach (string s in str2)
            {
                Console.Write(s + " ");
            }

        }

        public static string[] Solution(string str)
        {
            string[] arr = new string[(str.Length + 1) / 2]; // new string array to group pairs of the string/ include one for odd #of letters
            int k = 0;

            if (str.Length % 2 == 0) // if even # of chars in string
            {
                for (int i = 0; i < str.Length; i += 2) // loop through the input string by pairs => subtring to string => add to new string array
                {
                    //Console.WriteLine(str.Substring(i, 2).ToString());
                    arr[k] = str.Substring(i, 2).ToString();
                    k++;
                }
            }

            if (str.Length % 2 != 0) // loop through the input string by pairs => subtring to string => add to new string array
            {
                for (int i = 0; i < str.Length-1; i += 2)
                {
                    //Console.WriteLine(str.Substring(i, 2).ToString());
                    arr[k] = str.Substring(i, 2).ToString();
                    k++;
                }

                string s = str[str.Length - 1].ToString();
                arr[arr.Length - 1] = (s + '_').ToString(); // odd letter out add to the end of string array as "L_"
            }

            return arr;
        }

    }

_____________________________________________________________________________________________________________________________


Test Cases:
namespace Solution 
{
  using NUnit.Framework;
  using System;
  using System.Linq;

  [TestFixture]
  public class SplitStringTests
  {
    [Test]
    public void BasicTests()
    {
      Assert.AreEqual(new string[] { "ab", "c_" }, SplitString.Solution("abc"));
      Assert.AreEqual(new string[] { "ab", "cd", "ef" }, SplitString.Solution("abcdef"));
    }
    
    [Test]
    public void ExtendedTests()
    {
      var pairs = SplitString.Solution("cdabefg");
      
      Assert.IsNotNull(pairs, "solution did not return a value");
      Assert.AreEqual(4, pairs.Length, "solution did not return an array with enough pairs");
      Assert.AreEqual("cd", pairs[0], "solution did not return pairs with correct values");
      Assert.AreEqual("g_", pairs[3], "solution did not return pairs with correct values");
      
      pairs = SplitString.Solution("abcd");
      
      Assert.IsNotNull(pairs, "solution did not return a value");
      Assert.AreEqual(2, pairs.Length, "solution did not return an array with correct number of pairs");
      Assert.AreEqual("cd", pairs[1], "last pair in solution is not correct");
    }
    
    [Test]
    public void RandomTests()    
    {
      var rand = new Random();
      
      Func<string, string[]> mySolution = delegate (string str)
      {
        if(str.Length % 2 == 1)
        {
          str += "_";
        }
        var arr = new string[str.Length / 2];
  
        for(var i=0;i<str.Length;i+=2)
        {
          arr[i/2] = str.Substring(i,2);
        }
  
        return arr;   
      };
      
      for(int r = 0; r < 40; r++)
      {
        var length = rand.Next(1,15);
        var str = string.Concat(Enumerable.Range(0,length).Select(a => (char)rand.Next(65,91)));        
        Assert.AreEqual(string.Join(", ", mySolution(str)), string.Join(", ", SplitString.Solution(str)));
      }
    }
  }
}