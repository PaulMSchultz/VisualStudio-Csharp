using System;
using System.Text;

public class Accumul 
{
  public static String Accum(string s)
        {
            
            int counter = 1;

            StringBuilder sb = new StringBuilder();

            foreach (char c in s)
            {                
                for (int i = 0; i < counter; i++)
                {
                    if (i == 0)
                    {
                        sb.Append(char.ToUpper(c));
                    }
                    else
                    {
                        sb.Append(char.ToLower(c));
                    }   
                }

                if (counter != s.Length)
                {
                    sb.Append("-");
                }
                
                counter++;
            }

            return sb.ToString();
        }
}

*************************************************************************************

Test Cases:
using System;
using NUnit.Framework;

[TestFixture]
public static class AccumulTests 
{

    private static Random rnd = new Random();
    private static void testing(string actual, string expected) 
    {
        Assert.AreEqual(expected, actual);
    }

[Test]
    public static void test1() 
    {
        testing(Accumul.Accum("ZpglnRxqenU"), "Z-Pp-Ggg-Llll-Nnnnn-Rrrrrr-Xxxxxxx-Qqqqqqqq-Eeeeeeeee-Nnnnnnnnnn-Uuuuuuuuuuu");
        testing(Accumul.Accum("NyffsGeyylB"), "N-Yy-Fff-Ffff-Sssss-Gggggg-Eeeeeee-Yyyyyyyy-Yyyyyyyyy-Llllllllll-Bbbbbbbbbbb");
        testing(Accumul.Accum("MjtkuBovqrU"), "M-Jj-Ttt-Kkkk-Uuuuu-Bbbbbb-Ooooooo-Vvvvvvvv-Qqqqqqqqq-Rrrrrrrrrr-Uuuuuuuuuuu");
        testing(Accumul.Accum("EvidjUnokmM"), "E-Vv-Iii-Dddd-Jjjjj-Uuuuuu-Nnnnnnn-Oooooooo-Kkkkkkkkk-Mmmmmmmmmm-Mmmmmmmmmmm");
        testing(Accumul.Accum("HbideVbxncC"), "H-Bb-Iii-Dddd-Eeeee-Vvvvvv-Bbbbbbb-Xxxxxxxx-Nnnnnnnnn-Cccccccccc-Ccccccccccc");
        testing(Accumul.Accum("VwhvtHtrxfE"), "V-Ww-Hhh-Vvvv-Ttttt-Hhhhhh-Ttttttt-Rrrrrrrr-Xxxxxxxxx-Ffffffffff-Eeeeeeeeeee");
        testing(Accumul.Accum("KurgiKmkphY"), "K-Uu-Rrr-Gggg-Iiiii-Kkkkkk-Mmmmmmm-Kkkkkkkk-Ppppppppp-Hhhhhhhhhh-Yyyyyyyyyyy");
        testing(Accumul.Accum("NctlfBlnmfH"), "N-Cc-Ttt-Llll-Fffff-Bbbbbb-Lllllll-Nnnnnnnn-Mmmmmmmmm-Ffffffffff-Hhhhhhhhhhh");
        testing(Accumul.Accum("WegunHvbdmV"), "W-Ee-Ggg-Uuuu-Nnnnn-Hhhhhh-Vvvvvvv-Bbbbbbbb-Ddddddddd-Mmmmmmmmmm-Vvvvvvvvvvv");
        testing(Accumul.Accum("VoywwSpqidE"), "V-Oo-Yyy-Wwww-Wwwww-Ssssss-Ppppppp-Qqqqqqqq-Iiiiiiiii-Dddddddddd-Eeeeeeeeeee");
        testing(Accumul.Accum("VbaixFpxdcO"), "V-Bb-Aaa-Iiii-Xxxxx-Ffffff-Ppppppp-Xxxxxxxx-Ddddddddd-Cccccccccc-Ooooooooooo");
        testing(Accumul.Accum("OlyqvYwkuzF"), "O-Ll-Yyy-Qqqq-Vvvvv-Yyyyyy-Wwwwwww-Kkkkkkkk-Uuuuuuuuu-Zzzzzzzzzz-Fffffffffff");
        testing(Accumul.Accum("JrhfdMtchiH"), "J-Rr-Hhh-Ffff-Ddddd-Mmmmmm-Ttttttt-Cccccccc-Hhhhhhhhh-Iiiiiiiiii-Hhhhhhhhhhh");
        testing(Accumul.Accum("JiwpcSwslvW"), "J-Ii-Www-Pppp-Ccccc-Ssssss-Wwwwwww-Ssssssss-Lllllllll-Vvvvvvvvvv-Wwwwwwwwwww");
        testing(Accumul.Accum("EagpiEvmabJ"), "E-Aa-Ggg-Pppp-Iiiii-Eeeeee-Vvvvvvv-Mmmmmmmm-Aaaaaaaaa-Bbbbbbbbbb-Jjjjjjjjjjj");
        testing(Accumul.Accum("RznlcEmuxxP"), "R-Zz-Nnn-Llll-Ccccc-Eeeeee-Mmmmmmm-Uuuuuuuu-Xxxxxxxxx-Xxxxxxxxxx-Ppppppppppp");
        testing(Accumul.Accum("OrggaExarzP"), "O-Rr-Ggg-Gggg-Aaaaa-Eeeeee-Xxxxxxx-Aaaaaaaa-Rrrrrrrrr-Zzzzzzzzzz-Ppppppppppp");
        testing(Accumul.Accum("DriraMtedfB"), "D-Rr-Iii-Rrrr-Aaaaa-Mmmmmm-Ttttttt-Eeeeeeee-Ddddddddd-Ffffffffff-Bbbbbbbbbbb");
        testing(Accumul.Accum("BjxseRxgtjT"), "B-Jj-Xxx-Ssss-Eeeee-Rrrrrr-Xxxxxxx-Gggggggg-Ttttttttt-Jjjjjjjjjj-Ttttttttttt");
        testing(Accumul.Accum("EquhxOswchE"), "E-Qq-Uuu-Hhhh-Xxxxx-Oooooo-Sssssss-Wwwwwwww-Ccccccccc-Hhhhhhhhhh-Eeeeeeeeeee");
    }
    
    //-----------------------
    private static String AccumSol(string s) 
    {
     char[] a = s.ToLower().ToCharArray();
     string res = "";
     for (int i = 0; i < a.Length; i++) 
     {
         res += a[i].ToString().ToUpper();
         for (int j = 1; j < i + 1; j++)
             res += a[i];
         res += "-";
     }
     return res.Substring(0, res.Length-1);
    }
    private static String DoEx() 
    {
        string res = "";
        int n = -1;
        for (int i = 0; i < 20; i++) 
        {
            if (i % 5 == 0) n = rnd.Next(65, 90); 
            else n = rnd.Next(97, 122);
            res += (char)n;
        }
        return res;
    }
    
    //-----------------------
[Test]    
    public static void RandomTest() 
    {
        Console.WriteLine("100 Random Tests");
        for (int i = 0; i < 100; i++) 
        { 
            string s1 = DoEx();
            string r = AccumSol(s1);
            testing(Accumul.Accum(s1), r);
        }
    }  
    
}