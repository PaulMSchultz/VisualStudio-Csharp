using System;

public class Kata
{
  public static int CalculateYears(double principal, double interest,  double tax, double desiredPrincipal)
        {
          int y = 0;

            while(principal < desiredPrincipal)
            {
                y++;
                double newInterest = AnnualAccruedInterest(principal, interest);
                principal += (newInterest - (AnnualTaxDeductionOnInterest(newInterest, tax)));
            }
            return y;
        }
        
        public static double AnnualTaxDeductionOnInterest(double newInterest, double tax)
        {
            return newInterest * tax;
            
        }

        public static double AnnualAccruedInterest(double principal, double interest)
        {
            return principal * interest;            
        }
}

-------------------------------------------------------------------------------------------------------------

Test Cases:
using NUnit.Framework;
using System;

[TestFixture]
public class KataTests
{   
    [TestCase]    
    public void GetNumberOfYears0()  
    {     
      Assert.AreEqual(3, KataTests.CalculateYears(1000,0.05,0.18,1100));
    }
    
    [TestCase]
    public void GetNumberOfYears1()  
    {
       Assert.AreEqual(14 , KataTests.CalculateYears(1000,0.01625,0.18,1200));
    }
    
    [TestCase]    
    public void GetNumberOfYears3()  
    {     
      Assert.AreEqual(0, Kata.CalculateYears(1000,0.05,0.18,1000));
    }
    
    [Test]
    public static void RandomTest([Random(1,10,98)]int x)
    {
        Random r = new Random();
        double principal = (r.NextDouble() * 10000);
        
        //double interest = (0.05);
        double interest = (r.NextDouble() *  1);
        
        //double tax = (0.18);
        double tax = (r.NextDouble() *  0.21);
        
        //double desiredPrincipal = principal + 100;
        double desiredPrincipal = (r.NextDouble() * 10000) + principal;       
       
        Console.WriteLine("Starting Pricipal " + principal);
        Console.WriteLine("Desired Pricipal " + desiredPrincipal);
        
        Console.WriteLine("Interest Rate " + interest);
        Console.WriteLine("Tax Rate " + tax);
        
        Assert.AreEqual(KataTests.CalculateYears(principal,interest,tax,desiredPrincipal) , Kata.CalculateYears(principal,interest,tax,desiredPrincipal) );               
        
         Console.WriteLine("Years Required to accumulate Desired Pricipal " + KataTests.CalculateYears(principal,interest,tax,desiredPrincipal));
           
    }
    
    private static int CalculateYears(double principal, double interest,  double tax, double desiredPrincipal)
        {
            int years = 0;
            double newPrincipal = 0;
            
            if (desiredPrincipal <= principal) return 0;            
            else

            while (newPrincipal < desiredPrincipal)
            {
                double interestBeforeTax = (principal * interest);
                double interestAfterTax = interestBeforeTax - (interestBeforeTax * tax);
                newPrincipal = (principal + interestAfterTax);
                principal = newPrincipal;
                years++;
            }

            return years;
        }   
}